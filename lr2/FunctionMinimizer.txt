#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;
struct node 
{
    string* data; 
    node* next; 
    int size; 
};


string  **m, a, pustota="xxxxxx";
int cstrok, cstolbcov; 
vector <string> tdnf; 

int sizee(int a)  //Количество переменных функции
{
    int b = 2, cnt = 1;
    while (a > b)
    {
        b *= 2;
        cnt++;
    }
    return cnt;
}

void StreamFromFile(void) //Чтение данных из файла
{
    ifstream in("input.txt");
    if (in.is_open())
        getline(in, a);
    else
        cout << "Файл не найден.";
}

void StreamInFile(void) //Запись данных в файл
{
    ofstream fout;
    fout.open("output.txt");
    for (int i = 0; i < tdnf.size(); i++)
    {
        for (int j = 0; j < sizee(a.size()); j++)
        {
            if (tdnf[i][j] == '1')
                fout << "X" << (j + 1);
            else if (tdnf[i][j] == '0')
                fout << "nX" << (j + 1);
        }
        if (i != tdnf.size() - 1)
            fout << " V ";
    }
    fout.close();
}

string IntToString(int a) //Перевод десятичного числа в двоичное
{
    int ost = 0;
    string ostS = "";
    if (a == 0)
        return "0";
    else if (a == 1)
        return "1";
    else
    {
        ost = a % 2;
        if (ost == 0)
            ostS = "0";
        else ostS = "1";
        return  IntToString(a / 2) + ostS;
    }
}

string IntToString2(int a, int b) //Перевод десятичного числа в двоичное с определенным количеством разрядов
{
    string z = "";
    int size;
    z = IntToString(a);
    size = z.size();
    if (size < b)
        for (int i = 0; i < b - size; i++)
            z = "0" + z;
    return z;
}

string Inv(string a, int b) //Инвертирование разряда 
{
    if (a[b] == '1')
        a[b] = '0';
    else
        a[b] = '1';
    return a;
}


bool CheckFinish(node*& T) //Возможно ли произвести склеивание 
{
    bool finish = true; 
    bool ex, ex2, ex3; 
    for (int i = 0; i < T->size; i++)
    {
        ex = false;
        while (T->data[i] == pustota)
        {
            if (i == T->size - 1)
            {
                ex = true; 
                break; 
            }
            i++;
        }
        if (ex)
            break;
        for (int j = 0; j < sizee(a.size()); j++)
        {
             ex2 = false; 
            while (T->data[i][j] == '-')
            {
                if (j == sizee(a.size() - 1))
                {
                    ex2 = true; 
                    break; 
                }
                j++;
            }

            if (ex2)
                break;

            for (int k = 0; k < T->size; k++)
            {
                 ex3 = false; 
                while (T->data[k] == pustota)
                {
                    if (k == T->size - 1)
                    {
                        ex3 = true; 
                        break; 
                    }
                    k++;
                }
                if (k == i)
                {
                    if (k == T->size - 1)
                    {
                        ex3 = true;
                        break;
                    }
                    k++;
                }
                if (ex3)
                    break;
                if (T->data[k] == Inv(T->data[i], j))
                {
                    finish = false; 
                }
            }
        }
    }
    return finish; 
}

void Skley(node*& T)  //Склеивание
{
    if (CheckFinish(T) == false)
    {
        int sch3 = 0;
        bool ex4, ex5, ex6; 
        for (int i = 0; i < T->size; i++)
        {
            ex4 = false; 
            while (T->data[i] == pustota)
            {
                if (i == T->size - 1)
                {
                    ex4 = true; 
                    break; 
                }
                i++;
            }
            if (ex4)
                break;
            for (int j = 0; j < sizee(a.size()); j++)
            {
                ex5 = false; 
                while (T->data[i][j] == '-')
                {
                    if (j == sizee(a.size() - 1))
                    {
                        ex5 = true; 
                        break; 
                    }
                    j++;
                }

                if (ex5)
                    break;

                for (int k = 0; k < T->size; k++)
                {
                    ex6 = false; 
                    while (T->data[k] == pustota)
                    {
                        if (k == T->size - 1)
                        {
                            ex6 = true; 
                            break; 
                        }
                        k++;
                    }
                    if (k == i)
                    {
                        if (k == T->size - 1)
                        {
                            ex6 = true; 
                            break; 
                        }
                        k++;
                    }
                    if (ex6)
                        break;
                    if (T->data[k] == Inv(T->data[i], j))
                    {
                        sch3++;
                    }
                }
            }
        }
        T->next = new node; 
        T->next->data = new string[sch3];
        T->next->size = sch3; 
        sch3 = 0;
        for (int i = 0; i < T->size; i++)
        {
            ex4 = false; 
            while (T->data[i] == pustota)
            {
                if (i == T->size - 1)
                {
                    ex4 = true; 
                    break; 
                }
                i++;
            }
            if (ex4)
                break;
            for (int j = 0; j < sizee(a.size()); j++)
            {
                ex5 = false; 
                while (T->data[i][j] == '-')
                {
                    if (j == sizee(a.size() - 1))
                    {
                        ex5 = true; 
                        break; 
                    }
                    j++;
                }
                if (ex5)
                    break;

                for (int k = 0; k < T->size; k++)
                {
                    ex6 = false; 
                    while (T->data[k] == pustota)
                    {
                        if (k == T->size - 1)
                        {
                            ex6 = true; 
                            break; 
                        }
                        k++;
                    }
                    if (k == i)
                    {
                        if (k == T->size - 1)
                        {
                            ex6 = true; 
                            break; 
                        }
                        k++;
                    }
                    if (ex6)
                        break;
                    if (T->data[k] == Inv(T->data[i], j))
                    {
                        T->next->data[sch3] = T->data[k];
                        T->next->data[sch3][j] = '-';
                        sch3++;
                    }
                }
            }
        }
        for (int i = 0; i < sch3; i++)
            for (int j = 0; j < sch3; j++)
            {
                if (j == i)
                    j++;
                if (T->next->data[i] == T->next->data[j])
                    T->next->data[j] = pustota;
            }
        Skley(T->next); 
    }
    else 
    T->next = NULL;
}

bool CheckPoglot(string s1, string s2) //Поглащает ли s1 s2
{
    bool result = true, ex;
    for (int i = 0; i < sizee(a.size()); i++)
    {
        ex = false; 
        while (s1[i] == '-')
        {
            if (i == sizee(a.size()) - 1)
            {
                ex = true; 
                break; 
            }
            i++; 
        }
        if (ex)
            break; 
            result = result && (s1[i] == s2[i]); 
    }
    return result; 
}

void Pogloti(node*& T)  //Поглощение 
{
    if (T->next->next!= NULL)
        Pogloti(T->next);
    string tmp;
    bool exx; 
    for (int i = 0; i < T->next->size; i++)
    {
        exx = false; 
        while (T->next->data[i] == pustota)
        {
            if (i == T->next->size - 1)
            {
                exx = true; 
                break; 
            }
            i++; 
        }

        if (exx)
            break; 

        tmp = T->next->data[i]; 
        for (int j = 0; j < T->size; j++)
            if (CheckPoglot(tmp, T->data[j]))
                T->data[j] = pustota; 

        for (int j = 0; j < T->size; j++)
            if (T->data[j] == pustota)
            {
                T->data[j] = tmp; 
                break; 
            }

    }
    T->next = NULL; 
}



bool CheckStolbec(int n) //Содержит ли столбец только одну единицу
{
    int c = 0; 
    for (int i = 1; i < cstrok + 1; i++)
        if (m[i][n] == "1")
            c++; 
    if (c == 1)
        return true;
    else
        return false; 
}

void RemSt(int k)  //Вычеркивание поглощенных термов
{
    for (int i = 0; i < cstrok + 1; i++)
        m[i][k] = pustota; 
}

void dnf1(void)  //Включение в ТДНФ термов, которые обязательно должны войти в решение
{
    int stroka; 
    for (int i = 1; i < cstolbcov + 1; i++)
    {
        if (CheckStolbec(i))
        {
            for (int j = 1; j < cstrok + 1; j++)
                if (m[j][i] == "1")
                {
                    stroka = j;
                    tdnf.push_back(m[stroka][0]);
                    break; 
                }
            for (int j=1; j< cstolbcov + 1; j++)
                if (m[stroka][j] == "1")
                    RemSt(j); 
        }
    }
}

int KolvoEdStr(int z)  //Количество единиц в строке
{
    int k = 0; 
    for (int i = 1; i < cstolbcov + 1; i++)
        if (m[z][i] == "1")
            k++; 
    return k; 
}

bool CheckImp(void) //Остались ли непоглащенные термы
{
    int k = 0;
    for (int i = 1; i < cstolbcov + 1; i++)
        if (m[0][i] != pustota)
            k++;
    if (k > 0)
        return true;
    else
        return false; 
}
void dnf2(void)  //Включение в ТДНФ остальных термов
{
        while (CheckImp())
        {
            int kolvo = 0;
            for (int i = 1; i < cstrok + 1; i++)
                if (kolvo < KolvoEdStr(i))
                    kolvo = KolvoEdStr(i); 

            for (int i=1; i<cstrok+1; i++)
                if (KolvoEdStr(i) == kolvo)
                {
                    tdnf.push_back(m[i][0]); 
                    for (int j = 1; j < cstolbcov + 1; j++)
                        if (m[i][j] == "1")
                            RemSt(j);
                    break; 
                }
        }

}

void SkleyWithUnd(node*& A) //Склеивание с неопределенными значениями функции
{
    string tmp, tmp2; 
    bool ex1; 
    for (int i = 0; i < tdnf.size(); i++)
    { 
        tmp = tdnf[i];
           for (int k = 0; k < tmp.size(); k++)
           {
                ex1 = false;
                while (tmp[k] == '-')
                {
                    if (k == tmp.size() - 1)
                    {
                        ex1 = true;
                        break;
                    }
                    k++;
                }
                if (ex1)
                    break;
                for (int j = 0; j < A->size; i++)
                if (Inv(tmp, k) == A->data[j])
                {
                    tmp2 = A->data[j];
                    tmp2[k] = '-';
                    tdnf.erase(tdnf.begin() + i);
                    tdnf.insert(tdnf.begin() + i, tmp2);
                }
            }
    }
    if (A->next != NULL)
        SkleyWithUnd(A->next);
}
int main()
{
    StreamFromFile(); 
    int sch1 = 0, sch2 = 0; 
    for (int i = 0; i < a.size(); i++)
    {
        if (a[i] == '1')
            sch1++; 
        else if (a[i] == '-')
            sch2++; 
    }
    node* dn = new node;
    dn->data = new string[sch1];
    dn->size = sch1;


        node* und = new node;
        und->data = new string[sch2];
        und->size = sch2;

    string *dnf = new string[sch1]; 
    sch1 = 0; sch2 = 0; 
    for (int i = 0; i < a.size(); i++)
    {
        if (a[i] == '1')
        {
            dnf[sch1] = IntToString2(i,sizee(a.size())); 
            dn->data[sch1] = IntToString2(i, sizee(a.size()));
            sch1++;
        }
        else if (a[i] == '-')
        {
            und->data[sch2] = IntToString2(i, sizee(a.size()));
            sch2++;
        }
    }
    if (sch2 == 0)
        und = NULL; 
    Skley(dn);
    Pogloti(dn);
     cstrok = 0; 
    for (int i = 0; i < dn->size; i++)
        if (dn->data[i] != pustota)
            cstrok++; 
    cstolbcov = sch1; 
     m = new string* [cstrok+1];
    for (int i = 0; i < cstrok + 1; i++)
        m[i] = new string[sch1+1];

    for (int i = 0; i < cstrok + 1; i++)
        for (int j = 0; j < sch1 + 1; j++)
            m[i][j] = "0";

   for (int i = 1; i < sch1+1; i++)
       m[0][i] = dnf[i-1];


    int sch3 = 1; 
    for (int i = 0; i < dn->size; i++)
        if (dn->data[i] != pustota)
        {
            m[sch3][0] = dn->data[i];
            sch3++; 
        }

       for (int i=1; i<cstrok+1; i++)
           for (int j = 1; j < sch1 + 1; j++)
               if (CheckPoglot(m[i][0], m[0][j]))
                   m[i][j] = "1"; 
       dnf1(); 
       dnf2(); 
       if (und != NULL)
       {
           Skley(und);
           SkleyWithUnd(und);
       }
       StreamInFile(); 
}
